
sell=[
    #蔬菜
    [(0.08625,0,0.625,0,"常温"),
    (0.08625/3,0.0003,0.625,0.00005644,'冷链')],
    #水果
    [(0.2*0.9,0,0.625,0,"常温"),
    (0.2*0.9/3,0.0003,0.625,0.00005644,"冷链")],
    #肉类(四种)
    [(0.013325,0,0.625,0,"常温"),
    (0.013325/3,0.0006,0.625,0.00005644,"冷链")],
    [(0.013325,0,0.625,0,"常温"),
    (0.013325/3,0.0006,0.625,0.00005644,"冷链")],
    [(0.013325,0,0.625,0,"常温"),
    (0.013325/3,0.0006,0.625,0.00005644,"冷链")],
    [(0.013325,0,0.625,0,"常温"),
    (0.013325/3,0.0006,0.625,0.00005644,"冷链")],
]


food = ["蔬菜","水果","牛肉","羊肉","猪肉","禽肉"]

trans2_dis = 30
veg_trans1_dis = 935.87
fruit_trans1_dis = 1443.0488
meat_trans1_dis = 726.497 

trans2=[
    #蔬菜
    [(0.17*trans2_dis/veg_trans1_dis, 0.0000519, trans2_dis),
    (0.09*trans2_dis/veg_trans1_dis, 0.000186, trans2_dis),
    (0.17*trans2_dis/veg_trans1_dis, 0.0000519*0.576, trans2_dis),
    (0.09*trans2_dis/veg_trans1_dis, 0.000186*0.576, trans2_dis)],
    #水果
    [(0.20*trans2_dis/fruit_trans1_dis, 0.0000519, trans2_dis),
    (0.10*trans2_dis/fruit_trans1_dis, 0.000186, trans2_dis),
    (0.20*trans2_dis/fruit_trans1_dis, 0.0000519*0.576, trans2_dis),
    (0.10*trans2_dis/fruit_trans1_dis, 0.000186*0.576, trans2_dis)],
    #肉类
    [(0.015, 0.0001663, trans2_dis),
    (0.005, 0.0002461, trans2_dis),
    (0.015, 0.0001663*0.576, trans2_dis),
    (0.005, 0.0002461*0.576, trans2_dis)],
    [(0.015, 0.0001663, trans2_dis),
    (0.005, 0.0002461, trans2_dis),
    (0.015, 0.0001663*0.576, trans2_dis),
    (0.005, 0.0002461*0.576, trans2_dis)],
    [(0.015, 0.0001663, trans2_dis),
    (0.005, 0.0002461, trans2_dis),
    (0.015, 0.0001663*0.576, trans2_dis),
    (0.005, 0.0002461*0.576, trans2_dis)],
    [(0.015, 0.0001663, trans2_dis),
    (0.005, 0.0002461, trans2_dis),
    (0.015, 0.0001663*0.576, trans2_dis),
    (0.005, 0.0002461*0.576, trans2_dis)],
]

store1=[
    #蔬菜
    [(0.15,0,2.5,0),
    (0.05,0.0003,2.5,0.00005644)],
    #水果
    [(0.075,0,2.5,0),
    (0.025,0.0003,2.5,0.00005644)],
    #肉类
    [(0.0533,0,2.5,0),
    (0.0533/3,0.0003,2.5,0.00005644)],
    [(0.0533,0,2.5,0),
    (0.0533/3,0.0003,2.5,0.00005644)],
    [(0.0533,0,2.5,0),
    (0.0533/3,0.0003,2.5,0.00005644)],
    [(0.0533,0,2.5,0),
    (0.0533/3,0.0003,2.5,0.00005644)],
]

trans1=[
    #蔬菜
    [(0.17,0.0000519,veg_trans1_dis,0.3),
    (0.09,0.000186,veg_trans1_dis,0.307144),
    (0.17,0.0000519*0.576,veg_trans1_dis,0.3),
    (0.09,0.000186*0.576,veg_trans1_dis,0.307144)],
    #水果
    [(0.20,0.0000519,fruit_trans1_dis,0.32),
    (0.10,0.000186,fruit_trans1_dis,0.327144),
    (0.20,0.0000519*0.576,fruit_trans1_dis,0.32),
    (0.10,0.000186*0.576,fruit_trans1_dis,0.327144)],
    #肉类
    [(0.01,0.0000519,meat_trans1_dis,29.78),
    (0.01,0.0000519*0.576,meat_trans1_dis,29.78)],
    [(0.01,0.0000519,meat_trans1_dis,24.37),
    (0.01,0.0000519*0.576,meat_trans1_dis,24.37)],
    [(0.01,0.0000519,meat_trans1_dis,4.66),
    (0.01,0.0000519*0.576,meat_trans1_dis,4.66)],
    [(0.01,0.0000519,meat_trans1_dis,11.3),
    (0.01,0.0000519*0.576,meat_trans1_dis,11.3)]
]

percent_cum=[
    #蔬菜
    [
        [0.58,1],
        [0.865*0.99, 0.865*0.99+0.135*0.99, 0.99+0.865*0.01,1],
        [0.83,1],
        [0.865*0.99, 0.865*0.99+0.135*0.99, 0.99+0.865*0.01,1],
        [1-0.68,1],
        [0.818,0.155+0.818,0.155+0.818+0.019,1],
        [0.25,0.375,0.5,1]
    ],
    #水果
    [
        [0.83,1],
        [0.865*0.99, 0.865*0.99+0.135*0.99, 0.99+0.865*0.01,1],
        [0.83,1],
        [0.865*0.99, 0.99, 0.99+0.865*0.01,1],
        [1-0.608,1],
        [0.818,0.155+0.818,0.155+0.818+0.019,1],
        [0.25,0.375,0.5,1]
    ],
    #肉类
    [
        [0.15,1],
        [0.58*0.99,0.99,0.9958,1],
        [0.15,1],
        [0.99,1],
        [0.35,1],
        [0.818,0.155+0.818,0.155+0.818+0.019,1],
        [0.25,0.375,0.5,1],
    ],
    [
        [0.15,1],
        [0.58*0.99,0.99,0.9958,1],
        [0.15,1],
        [0.99,1],
        [0.35,1],
        [0.818,0.155+0.818,0.155+0.818+0.019,1],
        [0.25,0.375,0.5,1],
    ],
    [
        [0.15,1],
        [0.58*0.99,0.99,0.9958,1],
        [0.15,1],
        [0.99,1],
        [0.35,1],
        [0.818,0.155+0.818,0.155+0.818+0.019,1],
        [0.25,0.375,0.5,1],
    ],
    [
        [0.15,1],
        [0.58*0.99,0.99,0.9958,1],
        [0.15,1],
        [0.99,1],
        [0.35,1],
        [0.818,0.155+0.818,0.155+0.818+0.019,1],
        [0.25,0.375,0.5,1],
    ],
]

#能耗,施肥,器械设备,其他固定碳排放（饲料化肥生产等）,废弃物处理,肠胃发酵
#数据来源：目压文献的图，什么吊文献居然只有图没有数据啊（半恼）
produce=[
    #蔬
    (0.2613*1.35/8.5,0.2613*1.5/8.3,0.2613*0.5/8.3,0.2613*(8.5-3.35)/8.5,0.2613*0.01,0),
    #果
    (0.8931*1.25/6.5,0.8931*2/6.5,0.8931/13.8,0.8931*6.5/13.8,0.8931*(0.2/13.8),0),
    #肉
    (21.71*(0.25/10.5),0,21.71*0.017,21.71*0.242,21.71*0.13,21.71*0.611),
    (20.82*0.3/9.9,0,20.82*0.055,20.82*0.063,20.82*0.151,0.728*20.82),
    (2.89*0.1,0,2.89*0.124,2.89/3,2.89*0.466,2.89*0.077),
    (11.37*0.1,0,11.37*0.124,11.37/3,11.37*0.466,11.37*0.077)
]

#我的建议是，每种食物把每个环节（目前是5个

emission=[
    #6个排放的综合
    [0,0,0,0,0,0],
    #第二阶段，6个环节，加加工
    [0,0,0,0,0,0],
    #每个环节的排放
    [
        [0,0,0,0,0,0],
        [0,0,0,0,0,0],
        [0,0,0,0,0,0],
        [0,0,0,0,0,0],
        [0,0,0,0,0,0],
        [0,0,0,0,0,0],
    ]
]

from copy import deepcopy

emission_sankey=[]
for i in range(0,len(food)):
    emission_sankey.append(deepcopy((emission)))


percent=[
    [
        [0.58,0.42],
        [0.865*0.99, 0.135*0.99, 0.865*0.01,0.135*0.01],
        [0.83,0.17],
        [0.865*0.99, 0.135*0.99, 0.865*0.01,0.135*0.01],
        [1-0.68,0.68],
        [0.818,0.155,0.019,0.008],
        [0.25,0.125,0.125,0.5]
    ],
    #水果
    [
        [0.83,0.17],
        [0.865*0.99, 0.135*0.99, 0.865*0.01, 0.135*0.01],
        [0.83,0.17],
        [0.865*0.99, 0.135*0.99, 0.865*0.01, 0.135*0.01],
        [1-0.608,0.608],
        [0.818,0.155,0.019,0.008],
        [0.25,0.125,0.125,0.5]
    ],
    #肉类
    [
        [0.15,0.85],
        [0.58*0.99,0.99*0.42,0.58*0.01,0.42*0.01],
        [0.15,0.85],
        [0.99,0.01],
        [0.35,0.65],
        [0.818,0.155,0.019,0.008],
        [0.25,0.125,0.125,0.5]
    ],
    [
        [0.15,0.85],
        [0.58*0.99,0.99*0.42,0.58*0.01,0.42*0.01],
        [0.15,0.85],
        [0.99,0.01],
        [0.35,0.65],
        [0.818,0.155,0.019,0.008],
        [0.25,0.125,0.125,0.5]
    ],
    [
        [0.15,0.85],
        [0.58*0.99,0.99*0.42,0.58*0.01,0.42*0.01],
        [0.15,0.85],
        [0.99,0.01],
        [0.35,0.65],
        [0.818,0.155,0.019,0.008],
        [0.25,0.125,0.125,0.5]
    ],
    [
        [0.15,0.85],
        [0.58*0.99,0.99*0.42,0.58*0.01,0.42*0.01],
        [0.15,0.85],
        [0.99,0.01],
        [0.35,0.65],
        [0.818,0.155,0.019,0.008],
        [0.25,0.125,0.125,0.5]
    ],
]

mass=[122.77,81.9,3.1,3.9,15.3,5]

energy=[1.28,0.00339,0.00779,0.00112]
energyname=["火电","水电","核电","太阳能"]

disposal=[0.625*0.02582/0.466,-0.02754,0.165,0.02582]
disposal_name=["填埋","厌氧消化","堆肥","焚烧"]

package_emission=[0.084,0.116,0.169,0.169,0.169,0.169]

def get_emissions(f,i,j,k,l,p,n,m):
    #a\b\c\d\e分别为销售市内库存省际生产对应的元组,p:是否包装,energy:能耗，dis：废弃物处理方式
    #0.525为经过文献及实地调研对包装效果的预估值，结合JCP2021内线性模型以及保质期在包装前后变化的文献得出
    global emission_sankey
    a = sell[f][i]
    b = trans2[f][j]
    c = store1[f][k]
    d = trans2[f][l]
    percent_line = percent[f][0][i]*percent[f][1][j]*percent[f][2][k]*percent[f][3][l]*percent[f][4][p]*percent[f][5][n]*percent[f][6][m]
    lr1 = a[0]*(1-p*0.475)
    lr2 = b[0]*(1-p*0.475)
    lr3 = c[0]*(1-p*0.475)
    lr4 = d[0]*(1-p*0.475)
    m1 = 1/(1 - lr1)
    emission_sankey[f][2][0][0] += m1*a[1]*a[2]*energy[n]*percent_line*mass[f]
    emission_sankey[f][2][0][3] += m1*a[3]*percent_line*mass[f]
    emission_sankey[f][2][0][4] += (m1-1)*disposal[m]*percent_line*mass[f]
    if p == 1:
        emission_sankey[f][2][3][3] += package_emission[f]*percent_line*mass[f]
    m2 = m1/(1 - lr2)
    emission_sankey[f][2][1][2] += b[1]*b[2]*m2*percent_line*mass[f]
    emission_sankey[f][2][1][4] += (m2-m1)*disposal[m]*percent_line*mass[f]
    m3 = m2 / (1 - lr3)
    emission_sankey[f][2][2][0] += m3*c[1]*c[2]*energy[n]*percent_line*mass[f]
    emission_sankey[f][2][2][2] += m3*c[3]*percent_line*mass[f]
    emission_sankey[f][2][0][4] += (m3-m2)*disposal[m]*percent_line*mass[f]
    if f >= 2:
        m3 = m3/0.9
        emission_sankey[f][2][3][0] += m3 * 1.6 * energy[n]*percent_line*mass[f]
        emission_sankey[f][2][3][4] += m3 * 0.1 * disposal[m]*percent_line*mass[f]
    m4 = m3 / (1 - lr4)
    emission_sankey[f][2][4][2] += d[1]*d[2]*m4*percent_line*mass[f]
    emission_sankey[f][2][4][4] += (m4-m3) * disposal[m]*percent_line*mass[f]
    for t in range(0,6):
        emission_sankey[f][2][5][t] += m4 * produce[f][t] * percent_line * mass[f]

for f in range(0,6):
    for i in range(0,len(sell[f])):
        for j in range(0,len(trans2[f])):
            for k in range(0,len(store1[f])):
                for l in range(0,len(trans1[f])):
                    for p in range(0,2):
                        for m in range(0,len(disposal)):
                            for n in range(0,len(energy)):
                                get_emissions(f,i,j,k,l,p,n,m)

for f in range(0,6):
    for i in range(0,6):
        for j in range(0,6):
            emission_sankey[f][0][i] += emission_sankey[f][2][i][j]
            emission_sankey[f][1][j] += emission_sankey[f][2][i][j]

for f in range(0,6):
    print(emission_sankey[f][0])
    print(emission_sankey[f][1])

from pyecharts import options as opts
from pyecharts.charts import Sankey
#能耗,施肥,器械设备,其他固定碳排放（饲料化肥生产等）,废弃物处理,肠胃发酵
Node_label=[
    ["蔬菜 ","水果 ","牛肉 ","羊肉 ","猪肉 ","禽肉 "],
    ["售卖","市内运输","存储","加工","省际运输","生产"],
    ["能耗","施肥","运输","生产间接","废弃物处理","肠胃发酵"]
]

nodes=[]

for item in Node_label:
    for data in item:
        nodes.append({"name" : data})

for item in food:
    nodes.append({"name" : item})

print(nodes)

links=[]

emission_type=[
    [0,0,0,0,0,0],
    [0,0,0,0,0,0],
    [0,0,0,0,0,0],
    [0,0,0,0,0,0],
    [0,0,0,0,0,0],
    [0,0,0,0,0,0]
]

for f in range(0,6):
    for i in range(0,6):
        for j in range(0,6):
            emission_type[i][j] += emission_sankey[f][2][i][j]


print(emission_type)

for f in range(0,6):
    for i in range(0,6):
        links.append({"source": food[f], "target": Node_label[1][i], "value": emission_sankey[f][0][i]})
        links.append({"source": Node_label[2][i], "target": Node_label[0][f], "value": emission_sankey[f][1][i]})
for i in range(0,6):
    for j in range(0,6):
        if emission_type[i][j] != 0:
            links.append({"source": Node_label[1][i], "target": Node_label[2][j], "value": emission_type[i][j]})
    
print(links)

c = (
    Sankey()
    .add(
        "",
        nodes,
        links,
        linestyle_opt=opts.LineStyleOpts(opacity=0.2, curve=0.5, color="source"),
        label_opts=opts.LabelOpts(position="right"),
    )
    .set_global_opts(title_opts=opts.TitleOpts(title="整体碳排放"))
    .render("Sankey_total.html")    
)
